#C:\Ruby22-x64\bin -w

class Meals_Object
  attr_accessor :t_c, :veg, :g_f, :n_f, :f_f, :a_f

  def initialize(t_c, veg, g_f, n_f, f_f)

    @t_c=t_c
    @veg=veg
    @g_f=g_f
    @n_f=n_f
    @f_f=f_f
    @a_f=t_c-(veg+g_f+n_f+f_f)

  end

end

class Restaurant < Meals_Object
  attr_accessor :rest_name, :rest_rating

  def initialize
    super(t_c, veg, g_f, n_f, f_f)
    @rest_name=name
    @rest_rating=rating
  end
end


def get_info(first_msg, error_msg)
  temp_num = 0

  print first_msg
  temp_num = Integer(gets) rescue nil

  until temp_num != nil do
    print error_msg
    temp_num = Integer(gets) rescue nil
  end

  return temp_num

end


def get_meals()
  t_c=0
  veg=0
  g_f=0
  n_f=0
  f_f=0



  begin
    t_c = get_info("How many meals are we ordering for the team?: ", "Invalid input, please retype the number of meals been ordered: ")
    veg = get_info("How many meals of those meals are vegetarian?: ", "Invalid input, please retype the number of vegetarian meals been ordered: ")
    g_f = get_info("How many meals of those meals are gluten free?: ", "Invalid input, please retype the number of gluten free meals been ordered: ")
    n_f = get_info("How many meals of those meals are nut free?: ", "Invalid input, please retype the number of nut free meals been ordered: ")
    f_f = get_info("How many meals of those meals are fish free?: ", "Invalid input, please retype the number of fish free meals been ordered: ")


    puts "The total amount of meals is less than the amount of specialized meals been ordered. Please retype your order again." if (t_c<(veg+g_f+n_f+f_f))

  end until ((veg+g_f+n_f+f_f) <= t_c)

  order_team = Meals_Object.new(t_c, veg, g_f, n_f, f_f)

  return order_team
end



class Main

  puts "Welcome to my restaurant customizer"

  @@order_team = get_meals()

  #Error checking if the total number of gluten, nut, vegetarian, fish > Total meals



  #puts order_team.t_c


  # Algorithm, find which sub group is the biggest from the order
  # Select the 1st restaurant base upon the closest amount that can handle the number of meals
  #
  # Generate a bunch of restaurants using a random name and number generator function
  # about a 100 restaurants

  # Another function handles the selection

  # display results

end

def generate_rest()



end





Main

print "How many meals are we ordering for the team?: "
@@t_c = Integer(gets) rescue nil

until @@t_c != nil do
  print "Invalid input, please retype the number of meals been ordered: "
  @@t_c = Integer(gets) rescue nil
end
